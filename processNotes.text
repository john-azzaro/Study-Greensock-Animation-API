Process Notes for Greensock Animation API (GSAP)
================================================

PHASE 1: HTML
==============
1. Create header with logo and links if needed (burger, etc).
2. Create section with a "hero" class containing large collaboration image (which will be a focal point for our landing page)
   and a h1 element with a headline "Working Together Gets Results"
3. Create a div with the class "slider".
    *   This element will help transition the background element on top of everything, so this needs to be kept seperate 
        from the hero section.

PHASE 2: CSS Styles
===================
4. Style the slider so that we have a background color that is the full viewport height but also with a z-index
   of -1 so that it is behind all the other elements.
5. Style Nav (using flex or grid, whichever you prefer.)


PHASE 3: Hero Style section
============================
6. For the section, use flex to position the hero image in the center.

    section {                       
        display: flex;         
        height: 80vh;                
        justify-content: center;         
        align-items: center;           
    }

7. For the hero image, constrain the image to 100% height and width so you you know what you have to work with in the container.
    
    .hero img {  
        width: 100%;    
        height: 100%; 
    }

8. For the hero section itself, set the height and length so that you have a good size for your image.

    .hero {             
        height: 70%;
        width: 100%;
    }

9. Then, add an object-fit property to .hero > img.
    *   What this will do is make the picture fill screen, but only show the height and width you stipulate in .hero.

    .hero img {             
        width: 100%;                                         
        height: 100%;                                               
        object-fit: cover;              <== Setting object fit to cover, it will show the area we have for hero (i.e. 60%/100%) but it will not be distorted. */
    }

10. style headline

PHASE 4: JavaScript
===================
11.  Select all the elements you wish to animate with GSAP and save as variables.

    const hero = document.querySelector('.hero');
    const slider = document.querySelector('.slider');
    const logo = document.querySelector('#logo');
    const links = document.querySelector('.links');
    const headline = document.querySelector('.headline');


PHASE 5: JavaScript TimelineMax with GSAP.
=========================================== 
12. Create a variable called "tl" and assign "new TimelineMax"
    
    const tl = new TimelineMax();

13. Now you can animate each element using tl and adding the methods that animate the element how you wish:

    For example, we can use the ".fromTo method" https://greensock.com/docs/TimelineMax/fromTo() to starts at a specific spot and ends at a specfic spot.


                            tl.fromTo( target:Object, duration:Number, fromVars:Object, toVars:Object, position:* ) 


                            ----------------------------------------------------
                            tl.fromTo(hero, 1, {height: "0%"}, {height: "80%"});
                            ---------------------------------------------------- 


                                object targeted     height start
                                    \               /
                            tl.fromTo(hero, 1, {height: "0%"}, {height: "80%"}); 
                                            |                          \
                                    duration of effect                  height end


    So what happens here is that a new timelineMax object is created (i.e. tl), and the methos ".fromTo" is chained so that we do that animation.
    Then, we first stipulate the object targeted (i.e. "hero" from our variables above), then the duration of the effect (e.g. 1 = 1 second), then
    you need to add two objects... the first to START and the second to FINISH the animation.  

    You can also use easing effects as well.  For example, you could do this:

                            ------------------------------------------------------------------------------
                            tl.fromTo(hero, 1, {height: "0%"}, {height: "80%", ease: Power2.easeInOut });
                            ------------------------------------------------------------------------------

    REMEMBER: If you want multiple animations, dont add ther semicolon.

    What if you want to add more animations IN SEQUENCE?

                            ------------------------------------------------------------------------------
                            tl.fromTo(hero, 1, {height: "0%"}, {height: "80%", ease: Power2.easeInOut })
                            .fromTo(hero, 1.2, {width:"100%"}, {width: "80%", ease: Power2.easeInOut})       <== chained method with width animation
                            .fromTo(slider, 1.2, {x: "-100%"}, {x: "0%", ease: Power2.easeInOut})         <== chained method with sliding background
                            ------------------------------------------------------------------------------

    What if you want to execute animations AT THE SAME TIME?  
    
                            * To execute chained methods at different times (even though they may be farther down the chain),
                              you need to use "-=X.X" where X.X is the seconds BEFORE that occured that you want to execute the animation.

                              For example, suppose you have a chain of .fromTo methods with the following effect duration times.

                              hero, 1      (height)
                              hero, 1.2    (width)
                              slider, 1.4

                              If you want the slider animation to execute in order, simply leave the "-=X.X" out...
                              If you want the slider animation to execute at the same time as the previous hero width animation, 
                                you would need to add "-=1.2".
                              If you want the slider animation to execute at the start (i.e. hero height), you would need to add 1.4 seconds to 
                              the 1.2 seconds you already have (i.e. "-=2.4")
                              
                              
                           ------------------------------------------------------------------------------
                            tl.fromTo(hero, 1, {height: "0%"}, {height: "80%", ease: Power2.easeInOut })
                            .fromTo(hero, 1.2, {width:"100%"}, {width: "80%", ease: Power2.easeInOut})      
                            .fromTo(slider, 1.4, {x: "-100%"}, {x: "0%", ease: Power2.easeInOut}, "-=1.2")        
                            ------------------------------------------------------------------------------

                            * Whats happens here is that everything is that


    *   To find all the methods that can be used with TimelineMax see docs: https://greensock.com/docs/TimelineMax






additional resources
====================
https://zellwk.com/blog/gsap/ -- good outline of GSAP
https://greensock.com/docs/TimelineMax -- docs on timelineMax
https://greensock.com/docs/TweenMax  -- docs on tweenmax

